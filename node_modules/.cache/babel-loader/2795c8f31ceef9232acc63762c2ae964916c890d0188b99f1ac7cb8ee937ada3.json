{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\frontend\\\\Project-12\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n/*function Reset({click}){\r\n    return <button className = \"reset\" onClick={click} > Reset</button>\r\n}\r\nfunction Square({value, onSquareClick}){\r\n\r\n    return <button className =\"square\" onClick = {onSquareClick} >{value}</button>\r\n}\r\nexport default function Board() {\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [squares, setSquares] = useState(Array(9).fill(null));\r\n      function handleClick(i){\r\n        if(squares[i]){\r\n            return;\r\n        }\r\n        const nextSquares = squares.slice();\r\n        if(xIsNext){\r\n            nextSquares[i] = \"X\";\r\n        }else{\r\n            nextSquares[i] = \"O\"\r\n        }\r\n        setSquares(nextSquares);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n    function rset(){\r\n        setSquares(Array(9).fill(null));\r\n       \r\n    }\r\n  return (\r\n    <>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[0]} onSquareClick ={() => handleClick(0)}/>\r\n        <Square value = {squares[1]} onSquareClick ={() => handleClick(1)}/>\r\n         <Square value = {squares[2]} onSquareClick ={() => handleClick(2)}/>\r\n    </div>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[3]} onSquareClick = {() => handleClick(3)} />\r\n        <Square value = {squares[4]} onSquareClick = {() => handleClick(4)}/>\r\n        <Square value = {squares[5]} onSquareClick = {() => handleClick(5)}/>\r\n    </div>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[6]} onSquareClick = {() => handleClick(6)} />\r\n        <Square value = {squares[7]} onSquareClick = {() => handleClick(7)}/>\r\n        <Square value = {squares[8]} onSquareClick = {() => handleClick(8)}/>\r\n    </div>\r\n\r\n    <Reset click ={rset} />\r\n    </>\r\n  );\r\n}\r\n  */\n/*\r\nfunction DisplayCounter({count}){\r\n   return <h1>Count:{count} </h1>\r\n}\r\nfunction Increment({onClick}){\r\n   return <button onClick = {onClick}>+1</button>\r\n}\r\nfunction Decrement({onClick}){\r\n   return <button onClick = {onClick}> -1</button>\r\n}\r\nfunction Reset({onClick}){\r\n   return <button onClick={onClick}> Reset</button>\r\n}\r\n\n\nexport default function counter(){\r\nconst [value, setvalue] = useState(0);\r\nif(value<=0){\r\n   <p style ={{color:\"red\"}}> Can't go lower than 0!</p>\r\n}\r\nfunction handleIncrement(){\r\n   setvalue(value+1)\r\n}\r\nfunction handleDecrement(){\r\n  if(value>0){\r\n    setvalue(value-1);\r\n}\r\n}\r\nfunction handleReset(){\r\n   setvalue(0)\r\n}\r\n\n   return(\r\n       <>\r\n       <DisplayCounter count = {value} />\r\n       <Increment  onClick={ handleIncrement}/>\r\n       <Decrement onClick={handleDecrement} />\r\n       <Reset onClick={handleReset} />\r\n       </>\r\n   );\r\n}\r\n   */\n/*\r\n function EmojiDisplay({emoji, vote}){\r\n    return<h3>{emoji}:{vote}</h3>\r\n }\r\n function Increment({onClick}){\r\n    return <button onClick={onClick}> +1</button>\r\n }\r\n export default function Emjoi(){\r\n   const [emojiList, setEmojilist] = useState([\r\n    {emoji: 'ðŸ˜‚', votes:0},\r\n    {emoji:'ðŸ¤–', votes:0},\r\n    {emoji: 'ðŸ˜Ž', votes:0},\r\n   ]);\r\n   function handleIncrement(index){\r\n        const copy = emojiList.slice();\r\n       copy[index].votes+=1;\r\n       setEmojilist(copy);\r\n   }\r\n\r\n   return(\r\n    <div>\r\n    <h2> Emoji Voter Board</h2>\r\n    {emojiList.map((emojiLists, index) => (\r\n        <>\r\n        <EmojiDisplay\r\n             key={index}\r\n          emoji={emojiLists.emoji}\r\n          vote={emojiLists.votes}\r\n        />\r\n        <Increment onClick={() => handleIncrement(index)}/>\r\n        </>\r\n    ))}\r\n    </div>\r\n   );\r\n }\r\n   */\n\n/* function Display(){\r\n    return <h1> Vote for Your Favorite Pizza Topping!</h1>\r\n }\r\n function DisplayVotes({name, votes}){\r\n    return <p> {name}: {votes}</p>\r\n }\r\n function Increment({onClick}){\r\n    return <button onClick = {onClick}>+1</button>\r\n }\r\n function ResetAll({onClick}){\r\nreturn <button onClick={onClick}> Reset All </button>\r\n }\r\nexport default function ToppingBoard(){\r\n    const [toppingList, setTopping] = useState([\r\n        {name:\"Peperoni\", votes:0},\r\n        {name:\"Green Peppers\", votes:0},\r\n        {name:\"Pineapple\", votes:0}\r\n    ])\r\nfunction handleVote(index){\r\n    const newArray = toppingList.slice();\r\n    newArray[index].votes+=1;\r\n    setTopping(newArray);\r\n}\r\nfunction reset(){\r\n        const newArray = toppingList.map((topping) =>{\r\n            return{\r\n                name: topping.name,\r\n                votes:0\r\n            }\r\n        })\r\n        setTopping(newArray);    \r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <Display/>\r\n        {toppingList.map(( topping,index) => (\r\n        <>\r\n        <DisplayVotes\r\n        key = {index}\r\n        name = {topping.name}\r\n        votes = {topping.votes}\r\n        />\r\n\r\n        <Increment onClick={() => handleVote(index)} />\r\n        </>\r\n    ))}\r\n    <ResetAll onClick={() => reset()}/>\r\n       \r\n      </div> \r\n    );\r\n}\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Child({\n  onNameChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    onChange: event => onNameChange(event.target.value),\n    children: onNameChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 12\n  }, this);\n}\n_c = Child;\nexport default function parent() {\n  _s();\n  const [name, setName] = useState(\"\");\n  function handleNameChange(newName) {\n    setName(newName);\n  }\n  return /*#__PURE__*/_jsxDEV(Child, {\n    onNameChange: handleNameChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(parent, \"gFPpQ6rgfiGkmgRsh4q2nIO1W+Q=\");\nvar _c;\n$RefreshReg$(_c, \"Child\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Child","onNameChange","type","onChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","parent","_s","name","setName","handleNameChange","newName","$RefreshReg$"],"sources":["C:/Users/frank/frontend/Project-12/src/App.js"],"sourcesContent":["import {useState} from 'react';\r\n/*function Reset({click}){\r\n    return <button className = \"reset\" onClick={click} > Reset</button>\r\n}\r\nfunction Square({value, onSquareClick}){\r\n\r\n    return <button className =\"square\" onClick = {onSquareClick} >{value}</button>\r\n}\r\nexport default function Board() {\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [squares, setSquares] = useState(Array(9).fill(null));\r\n      function handleClick(i){\r\n        if(squares[i]){\r\n            return;\r\n        }\r\n        const nextSquares = squares.slice();\r\n        if(xIsNext){\r\n            nextSquares[i] = \"X\";\r\n        }else{\r\n            nextSquares[i] = \"O\"\r\n        }\r\n        setSquares(nextSquares);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n    function rset(){\r\n        setSquares(Array(9).fill(null));\r\n       \r\n    }\r\n  return (\r\n    <>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[0]} onSquareClick ={() => handleClick(0)}/>\r\n        <Square value = {squares[1]} onSquareClick ={() => handleClick(1)}/>\r\n         <Square value = {squares[2]} onSquareClick ={() => handleClick(2)}/>\r\n    </div>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[3]} onSquareClick = {() => handleClick(3)} />\r\n        <Square value = {squares[4]} onSquareClick = {() => handleClick(4)}/>\r\n        <Square value = {squares[5]} onSquareClick = {() => handleClick(5)}/>\r\n    </div>\r\n    <div className = \"board-row\">\r\n        <Square value = {squares[6]} onSquareClick = {() => handleClick(6)} />\r\n        <Square value = {squares[7]} onSquareClick = {() => handleClick(7)}/>\r\n        <Square value = {squares[8]} onSquareClick = {() => handleClick(8)}/>\r\n    </div>\r\n\r\n    <Reset click ={rset} />\r\n    </>\r\n  );\r\n}\r\n  */\r\n /*\r\n function DisplayCounter({count}){\r\n    return <h1>Count:{count} </h1>\r\n }\r\n function Increment({onClick}){\r\n    return <button onClick = {onClick}>+1</button>\r\n }\r\n function Decrement({onClick}){\r\n    return <button onClick = {onClick}> -1</button>\r\n }\r\n function Reset({onClick}){\r\n    return <button onClick={onClick}> Reset</button>\r\n }\r\n\r\n\r\n export default function counter(){\r\nconst [value, setvalue] = useState(0);\r\nif(value<=0){\r\n    <p style ={{color:\"red\"}}> Can't go lower than 0!</p>\r\n}\r\nfunction handleIncrement(){\r\n    setvalue(value+1)\r\n}\r\nfunction handleDecrement(){\r\n   if(value>0){\r\n     setvalue(value-1);\r\n}\r\n}\r\nfunction handleReset(){\r\n    setvalue(0)\r\n}\r\n\r\n    return(\r\n        <>\r\n        <DisplayCounter count = {value} />\r\n        <Increment  onClick={ handleIncrement}/>\r\n        <Decrement onClick={handleDecrement} />\r\n        <Reset onClick={handleReset} />\r\n        </>\r\n    );\r\n }\r\n    */\r\n/*\r\n function EmojiDisplay({emoji, vote}){\r\n    return<h3>{emoji}:{vote}</h3>\r\n }\r\n function Increment({onClick}){\r\n    return <button onClick={onClick}> +1</button>\r\n }\r\n export default function Emjoi(){\r\n   const [emojiList, setEmojilist] = useState([\r\n    {emoji: 'ðŸ˜‚', votes:0},\r\n    {emoji:'ðŸ¤–', votes:0},\r\n    {emoji: 'ðŸ˜Ž', votes:0},\r\n   ]);\r\n   function handleIncrement(index){\r\n        const copy = emojiList.slice();\r\n       copy[index].votes+=1;\r\n       setEmojilist(copy);\r\n   }\r\n\r\n   return(\r\n    <div>\r\n    <h2> Emoji Voter Board</h2>\r\n    {emojiList.map((emojiLists, index) => (\r\n        <>\r\n        <EmojiDisplay\r\n             key={index}\r\n          emoji={emojiLists.emoji}\r\n          vote={emojiLists.votes}\r\n        />\r\n        <Increment onClick={() => handleIncrement(index)}/>\r\n        </>\r\n    ))}\r\n    </div>\r\n   );\r\n }\r\n   */\r\n\r\n/* function Display(){\r\n    return <h1> Vote for Your Favorite Pizza Topping!</h1>\r\n }\r\n function DisplayVotes({name, votes}){\r\n    return <p> {name}: {votes}</p>\r\n }\r\n function Increment({onClick}){\r\n    return <button onClick = {onClick}>+1</button>\r\n }\r\n function ResetAll({onClick}){\r\nreturn <button onClick={onClick}> Reset All </button>\r\n }\r\nexport default function ToppingBoard(){\r\n    const [toppingList, setTopping] = useState([\r\n        {name:\"Peperoni\", votes:0},\r\n        {name:\"Green Peppers\", votes:0},\r\n        {name:\"Pineapple\", votes:0}\r\n    ])\r\nfunction handleVote(index){\r\n    const newArray = toppingList.slice();\r\n    newArray[index].votes+=1;\r\n    setTopping(newArray);\r\n}\r\nfunction reset(){\r\n        const newArray = toppingList.map((topping) =>{\r\n            return{\r\n                name: topping.name,\r\n                votes:0\r\n            }\r\n        })\r\n        setTopping(newArray);    \r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <Display/>\r\n        {toppingList.map(( topping,index) => (\r\n        <>\r\n        <DisplayVotes\r\n        key = {index}\r\n        name = {topping.name}\r\n        votes = {topping.votes}\r\n        />\r\n\r\n        <Increment onClick={() => handleVote(index)} />\r\n        </>\r\n    ))}\r\n    <ResetAll onClick={() => reset()}/>\r\n       \r\n      </div> \r\n    );\r\n}\r\n*/\r\nfunction Child({onNameChange}){\r\n    return <input type = \"text\" onChange={(event) => onNameChange(event.target.value)}>{onNameChange}</input>\r\n}\r\nexport default  function parent(){\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleNameChange(newName){\r\n        setName(newName);\r\n    }\r\n    return(\r\n        <Child onNameChange={handleNameChange}/>\r\n    )\r\n}"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA,SAAAC,MAAA,IAAAC,OAAA;AAsDA,SAASC,KAAKA,CAAC;EAACC;AAAY,CAAC,EAAC;EAC1B,oBAAOF,OAAA;IAAOG,IAAI,EAAG,MAAM;IAACC,QAAQ,EAAGC,KAAK,IAAKH,YAAY,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;IAAAC,QAAA,EAAEN;EAAY;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAC7G;AAACC,EAAA,GAFQZ,KAAK;AAGd,eAAgB,SAASa,MAAMA,CAAA,EAAE;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEpC,SAASoB,gBAAgBA,CAACC,OAAO,EAAC;IAC9BF,OAAO,CAACE,OAAO,CAAC;EACpB;EACA,oBACInB,OAAA,CAACC,KAAK;IAACC,YAAY,EAAEgB;EAAiB;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEhD;AAACG,EAAA,CATwBD,MAAM;AAAA,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}